from numpy import *
import sys
def is_float(string):
    try:
        float(string)
        return True
    except ValueError:
        return False
class Transformacje:
    def __init__(self, model: str = 'wgs80'):
        if model == "wgs84":
            self.a = 6378137.0 # semimajor_axis
            self.b = 6356752.31424518 # semiminor_axis
        elif model == "grs80":
            self.a = 6378137.0
            self.b = 6356752.31414036
        elif model == "Krasowski":
            self.a = 6378245.0
            self.b = 6356863.01877
        else:
            raise NotImplementedError(f"{model} model not implemented")
        self.flat = (self.a - self.b) / self.a
        self.ecc = sqrt(2 * self.flat - self.flat ** 2) # eccentricity  WGS84:0.0818191910428 
        self.ecc2 = (2 * self.flat - self.flat ** 2) # eccentricity**2
        
    def hirvonen(self, X, Y, Z, output = 'dec_degree'):

            # promien rownoleznika
        p = sqrt(X**2 + Y**2)
            # przyblizona wartosc phi
        phi = arctan(Z/(p*(1-self.ecc2)))

        N = self.a/(1 - self.ecc2 * sin(phi)**2)**(1/2) 
            # obliczamy wartosc N
        while True:
            phi_poprzednie = phi
                #print(phi)
                # obliczenie wysokosci
            h = p/cos(phi_poprzednie) - N
                #obliczenie poprawionej wartosci phi
            phi = arctan(Z/p*((N*(1-self.ecc2)+h)/(N+h))**(-1))
            #warunek
            if abs(phi -phi_poprzednie)<(0.000001/3600*pi/180):
                break
            N= self.a/(1-self.ecc2*sin(phi)**2)**(1/2)
            h= p/cos(phi)-N
            lam= arctan2(Y,X)
        if output == "dec_degree":
            return degrees(phi), degrees(lam), h 
        elif output == "dms":
            phi = self.deg2dms(degrees(phi))
            lam = self.deg2dms(degrees(lam))
            return f"{lat[0]:02d}:{lat[1]:02d}:{lat[2]:.2f}", f"{lon[0]:02d}:{lon[1]:02d}:{lon[2]:.2f}", f"{h:.3f}"
        else:
            raise NotImplementedError(f"{output} - output format not defined")